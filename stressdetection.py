# -*- coding: utf-8 -*-
"""StressDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1srUnUwPYt91kWtKhPHFgRnAt5X08Wd7L
"""

import numpy as np

import pandas as pd

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('stress.csv')
df.head()

df.describe()

df.isnull().sum()

import nltk
import re
from nltk.corpus import stopwords
import string

nltk.download('stopwords')
stemmer=nltk.SnowballStemmer("english")
stopword=set(stopwords.words('english'))

def clean(text):
  text=str(text).lower()
  text=re.sub('\[.*?\]','',text)
  text=re.sub('https?://\S+|www\.\S+', '', text)
  text=re.sub('<,*?>+','', text)
  text=re.sub('[%s]' % re.escape(string.punctuation), '', text)
  text=re.sub('\n', '', text)
  text=re.sub('\w*\d\w*','',text)
  text=[word for word in text.split(' ') if word not in stopword]
  text=" ".join(text)
  text=[stemmer.stem(word) for word in text.split(' ')]
  text=" ".join(text)
  return text

df["text"]=df["text"].apply(clean)

import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
text=" ".join(i for i in df.text)
stopwords=set(STOPWORDS)
wordcloud=WordCloud(stopwords=stopwords,
               background_color="white").generate(text)
plt.figure(figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

df["label"]=df["label"].map({0: "No Stress", 1:"Stress"})
df=df[["text", "label"]]
df.head()

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split

x=np.array(df["text"])
y=np.array(df["label"])

cv=CountVectorizer()
x=cv.fit_transform(x)
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.33,
                                                random_state=42)

from sklearn.naive_bayes import BernoulliNB
model=BernoulliNB()
model.fit(xtrain, ytrain)

user = input("Enter a Text: ")
data = cv.transform([user]).toarray()
output = model.predict(data)
print(output)

